{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport matter from \"gray-matter\";\nimport Layout from \"../components/Layout\";\nimport BlogList from \"../components/BlogList\";\n\nvar Index = function Index(props) {\n  console.log({\n    props: props\n  });\n  return __jsx(Layout, {\n    pathname: \"/\",\n    siteTitle: props.title,\n    siteDescription: props.description\n  }, __jsx(\"section\", null, __jsx(BlogList, {\n    allBlogs: props.allBlogs\n  })));\n};\n\nexport default Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var siteConfig, posts;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return import(\"../data/config.json\");\n\n        case 2:\n          siteConfig = _context.sent;\n\n          //get posts & context from folder\n          posts = function (context) {\n            var keys = context.keys();\n            var values = keys.map(context);\n            var data = keys.map(function (key, index) {\n              // Create slug from filename\n              var slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n              var value = values[index]; // Parse yaml metadata & markdownbody in document\n\n              var document = matter(value[\"default\"]);\n              return {\n                document: document,\n                slug: slug\n              };\n            });\n            return data;\n          }(require.context(\"../posts\", true, /\\.md$/));\n\n          return _context.abrupt(\"return\", _objectSpread({\n            allBlogs: posts\n          }, siteConfig));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));","map":null,"metadata":{},"sourceType":"module"}