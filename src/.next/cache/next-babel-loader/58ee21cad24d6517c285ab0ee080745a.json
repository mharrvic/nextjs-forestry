{"ast":null,"code":"var _jsxFileName = \"/Users/mac/podcast/pna/website/podcastnetworkasia/brevifolia-next-forestry/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from \"gray-matter\";\nimport Layout from \"../components/Layout\";\nimport BlogList from \"../components/BlogList\";\n\nconst Index = props => {\n  console.log({\n    props\n  });\n  return __jsx(Layout, {\n    pathname: \"/\",\n    siteTitle: props.title,\n    siteDescription: props.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(BlogList, {\n    allBlogs: props.allBlogs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Index;\n\nIndex.getInitialProps = async function () {\n  const siteConfig = await import(`../data/config.json`); //get posts & context from folder\n\n  const posts = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n      const value = values[index]; // Parse yaml metadata & markdownbody in document\n\n      const document = matter(value.default);\n      return {\n        document,\n        slug\n      };\n    });\n    return data;\n  })(require.context(\"../posts\", true, /\\.md$/));\n\n  return _objectSpread({\n    allBlogs: posts\n  }, siteConfig);\n};","map":{"version":3,"sources":["/Users/mac/podcast/pna/website/podcastnetworkasia/brevifolia-next-forestry/src/pages/index.js"],"names":["matter","Layout","BlogList","Index","props","console","log","title","description","allBlogs","getInitialProps","siteConfig","posts","context","keys","values","map","data","key","index","slug","replace","split","slice","join","value","document","default","require"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;AACA,SACE,MAAC,MAAD;AACE,IAAA,QAAQ,EAAC,GADX;AAEE,IAAA,SAAS,EAAEA,KAAK,CAACG,KAFnB;AAGE,IAAA,eAAe,EAAEH,KAAK,CAACI,WAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEJ,KAAK,CAACK,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CADF;AAWD,CAbD;;AAeA,eAAeN,KAAf;;AAEAA,KAAK,CAACO,eAAN,GAAwB,kBAAiB;AACvC,QAAMC,UAAU,GAAG,MAAM,OAAQ,qBAAR,CAAzB,CADuC,CAEvC;;AACA,QAAMC,KAAK,GAAG,CAAEC,OAAD,IAAa;AAC1B,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AACA,UAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAASH,OAAT,CAAf;AACA,UAAMI,IAAI,GAAGH,IAAI,CAACE,GAAL,CAAS,CAACE,GAAD,EAAMC,KAAN,KAAgB;AACpC;AACA,YAAMC,IAAI,GAAGF,GAAG,CACbG,OADU,CACF,WADE,EACW,EADX,EAEVC,KAFU,CAEJ,GAFI,EAGVC,KAHU,CAGJ,CAHI,EAGD,CAAC,CAHA,EAIVC,IAJU,CAIL,GAJK,CAAb;AAKA,YAAMC,KAAK,GAAGV,MAAM,CAACI,KAAD,CAApB,CAPoC,CAQpC;;AACA,YAAMO,QAAQ,GAAG1B,MAAM,CAACyB,KAAK,CAACE,OAAP,CAAvB;AACA,aAAO;AACLD,QAAAA,QADK;AAELN,QAAAA;AAFK,OAAP;AAID,KAdY,CAAb;AAeA,WAAOH,IAAP;AACD,GAnBa,EAmBXW,OAAO,CAACf,OAAR,CAAgB,UAAhB,EAA4B,IAA5B,EAAkC,OAAlC,CAnBW,CAAd;;AAqBA;AACEJ,IAAAA,QAAQ,EAAEG;AADZ,KAEKD,UAFL;AAID,CA5BD","sourcesContent":["import matter from \"gray-matter\";\n\nimport Layout from \"../components/Layout\";\nimport BlogList from \"../components/BlogList\";\n\nconst Index = (props) => {\n  console.log({ props });\n  return (\n    <Layout\n      pathname=\"/\"\n      siteTitle={props.title}\n      siteDescription={props.description}\n    >\n      <section>\n        <BlogList allBlogs={props.allBlogs} />\n      </section>\n    </Layout>\n  );\n};\n\nexport default Index;\n\nIndex.getInitialProps = async function() {\n  const siteConfig = await import(`../data/config.json`);\n  //get posts & context from folder\n  const posts = ((context) => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key\n        .replace(/^.*[\\\\\\/]/, \"\")\n        .split(\".\")\n        .slice(0, -1)\n        .join(\".\");\n      const value = values[index];\n      // Parse yaml metadata & markdownbody in document\n      const document = matter(value.default);\n      return {\n        document,\n        slug,\n      };\n    });\n    return data;\n  })(require.context(\"../posts\", true, /\\.md$/));\n\n  return {\n    allBlogs: posts,\n    ...siteConfig,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}